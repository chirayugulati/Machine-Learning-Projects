import numpy as np
import pandas as pd
import yfinance as yf
import matplotlib.pyplot as plt

# Define parameters
tickers = ["AAPL", "MSFT", "AMZN", "GOOG"]
start_date = "2019-01-01"
end_date = "2022-03-21"
confidence_level = 0.95
holding_period = 5
investment_amount = 1000000
simulation_trials = 10000

# Download data from Yahoo Finance
data = yf.download(tickers, start=start_date, end=end_date)

# Calculate daily returns and covariance matrix
returns = data['Adj Close'].pct_change().dropna()
covariance = returns.cov()

# Calculate mean return and standard deviation
mean_return = returns.mean()
std_dev = returns.std()

# Define portfolio weights
weights = np.array([0.25, 0.25, 0.25, 0.25])

# Define function to simulate portfolio returns
def simulate_portfolio_returns(mean_return, covariance, weights, simulation_trials, holding_period):
    # Calculate daily drift and random shocks
    daily_drift = np.exp((mean_return - 0.5 * np.diag(covariance)) * holding_period)
    daily_shocks = np.random.normal(0, np.sqrt(np.diag(covariance)), (len(mean_return), simulation_trials * holding_period))
    
    # Calculate simulated log returns
    simulated_log_returns = np.zeros((len(mean_return), simulation_trials))
    for i in range(simulation_trials):
        simulated_log_returns[:, i] = np.sum(daily_shocks[:, i*holding_period:(i+1)*holding_period], axis=1)
        
    # Calculate simulated portfolio returns
    simulated_portfolio_returns = np.dot(weights, np.exp(simulated_log_returns)) - 1
    
    return simulated_portfolio_returns

# Simulate portfolio returns and calculate VaR
simulated_portfolio_returns = simulate_portfolio_returns(mean_return, covariance, weights, simulation_trials, holding_period)
var = np.percentile(simulated_portfolio_returns, 100 - confidence_level * 100) * np.sqrt(holding_period) * investment_amount

# Plot the distribution of simulated portfolio returns
plt.hist(simulated_portfolio_returns, bins=50)
plt.axvline(var, color='red', linestyle='dashed', linewidth=1)
plt.title("Simulated Portfolio Returns Distribution")
plt.xlabel("Portfolio Return")
plt.ylabel("Frequency")
plt.show()

print("The", holding_period, "-day Value at Risk at a confidence level of", confidence_level, "is", round(var, 2))
